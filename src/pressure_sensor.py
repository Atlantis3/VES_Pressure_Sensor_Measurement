# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'example4.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import serial.tools.list_ports
import sys
import serial
import struct
from pyqtgraph import PlotWidget
from pyqtgraph import mkPen
from datetime import datetime
from collections import deque
from pyqtgraph.graphicsItems.DateAxisItem import DateAxisItem
import os
import csv





# Create a custom thread class to handle serial communication
class SerialReaderThread(QtCore.QThread):
    # Signal to send data to the main thread
    new_data_signal = QtCore.pyqtSignal(tuple)
    float_size = 4  # Size of each float in bytes (4 bytes per float)
    num_floats = 6  # Number of floats sent (voltage_readings[6])

    
    def __init__(self, port, baud_rate=9600):
        super().__init__()
        self.serial_port = serial.Serial(port, baud_rate, timeout=1)
        self.running = True

    def run(self):
        # Continuously read from the serial port
        while self.running:
            if self.serial_port.in_waiting > self.float_size * self.num_floats:
                raw_data = self.serial_port.read(self.float_size * self.num_floats)  # Read the bytes from the arduino
                voltage_readings = struct.unpack('6f', raw_data)

                self.new_data_signal.emit(voltage_readings)  # Emit signal to update the main thread
            QtCore.QThread.msleep(100)  # Sleep to prevent high CPU usage

    def stop(self):
        # Stop the thread
        self.running = False
        self.serial_port.close()


class Ui_MainWindow(object):
    pressure_sensor_1_data = deque(maxlen=50)
    pressure_sensor_2_data = deque(maxlen=50)
    pressure_sensor_3_data = deque(maxlen=50)
    pressure_sensor_4_data = deque(maxlen=50)
    pressure_sensor_5_data = deque(maxlen=50)
    pressure_sensor_6_data = deque(maxlen=50)
    time_stamp_data = deque(maxlen=50)
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1501, 935)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")


        self.select_com_port_label = QtWidgets.QLabel(self.centralwidget)
        self.select_com_port_label.setGeometry(QtCore.QRect(20, 20, 81, 31))
        self.select_com_port_label.setObjectName("select_com_port_label")


        self.com_port_box = QtWidgets.QComboBox(self.centralwidget)
        self.com_port_box.setGeometry(QtCore.QRect(110, 30, 69, 22))
        self.com_port_box.setObjectName("com_port_box")
        com_port_list = self.get_com_ports_list()
        self.com_port_box.addItems(com_port_list)


        self.log_output_box = QtWidgets.QTextBrowser(self.centralwidget)
        self.log_output_box.setGeometry(QtCore.QRect(1160, 0, 341, 151))
        self.log_output_box.setObjectName("log_output_box")
        self.log_output_box.setPlainText("Logs")


        self.refresh_button = QtWidgets.QPushButton(self.centralwidget)
        self.refresh_button.setGeometry(QtCore.QRect(190, 30, 75, 23))
        self.refresh_button.setObjectName("refresh_button")
        self.refresh_button.clicked.connect(self.refresh_com_ports)


        self.connect_button = QtWidgets.QPushButton(self.centralwidget)
        self.connect_button.setGeometry(QtCore.QRect(110, 60, 75, 23))
        self.connect_button.setObjectName("connect_button")
        if not com_port_list:
            self.connect_button.setEnabled(False)
        self.connect_button.clicked.connect(self.start_reading)


        self.com_port_input = QtWidgets.QTextBrowser(self.centralwidget)
        self.com_port_input.setGeometry(QtCore.QRect(1160, 180, 341, 71))
        self.com_port_input.setObjectName("com_port_input")


        self.com_port_input_label = QtWidgets.QLabel(self.centralwidget)
        self.com_port_input_label.setGeometry(QtCore.QRect(1160, 160, 131, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.com_port_input_label.setFont(font)
        self.com_port_input_label.setObjectName("com_port_input_label")

        self.disconnect_button = QtWidgets.QPushButton(self.centralwidget)
        self.disconnect_button.setGeometry(QtCore.QRect(190, 60, 75, 23))
        self.disconnect_button.setObjectName("disconnect_button")
        if not com_port_list:
            self.disconnect_button.setEnabled(False)
        elif self.connect_button.isEnabled:
            self.disconnect_button.setEnabled(False)
        self.disconnect_button.clicked.connect(self.stop_reading)

        # labels
        self.l_data_recording = QtWidgets.QLabel(self.centralwidget)
        self.l_data_recording.setGeometry(QtCore.QRect(330, 10, 221, 16))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)


        self.l_data_recording.setFont(font)
        self.l_data_recording.setObjectName("l_data_recording")
        self.l_device_selection = QtWidgets.QLabel(self.centralwidget)
        self.l_device_selection.setGeometry(QtCore.QRect(10, 10, 251, 16))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.l_device_selection.setFont(font)
        self.l_device_selection.setObjectName("l_device_selection")

        self.l_folder_location = QtWidgets.QLabel(self.centralwidget)
        self.l_folder_location.setGeometry(QtCore.QRect(330, 40, 161, 16))
        self.l_folder_location.setObjectName("l_folder_location")

        self.l_data_plotting = QtWidgets.QLabel(self.centralwidget)
        self.l_data_plotting.setGeometry(QtCore.QRect(10, 170, 131, 16))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.l_data_plotting.setFont(font)
        self.l_data_plotting.setObjectName("l_data_plotting")

        # pressure sensor checkbox
        self.ps1 = QtWidgets.QCheckBox(self.centralwidget)
        self.ps1.setGeometry(QtCore.QRect(20, 210, 111, 17))
        self.ps1.setObjectName("ps1")
        self.ps1.clicked.connect(self.ps1_check_box)

        self.ps2 = QtWidgets.QCheckBox(self.centralwidget)
        self.ps2.setGeometry(QtCore.QRect(140, 210, 111, 17))
        self.ps2.setObjectName("ps2")
        self.ps2.clicked.connect(self.ps2_check_box)

        self.ps3 = QtWidgets.QCheckBox(self.centralwidget)
        self.ps3.setGeometry(QtCore.QRect(260, 210, 111, 17))
        self.ps3.setObjectName("ps3")
        self.ps3.clicked.connect(self.ps3_check_box)

        self.ps4 = QtWidgets.QCheckBox(self.centralwidget)
        self.ps4.setGeometry(QtCore.QRect(20, 230, 111, 17))
        self.ps4.setObjectName("ps4")
        self.ps4.clicked.connect(self.ps4_check_box)

        self.ps5 = QtWidgets.QCheckBox(self.centralwidget)
        self.ps5.setGeometry(QtCore.QRect(140, 230, 111, 17))
        self.ps5.setObjectName("ps5")
        self.ps5.clicked.connect(self.ps5_check_box)

        self.ps6 = QtWidgets.QCheckBox(self.centralwidget)
        self.ps6.setGeometry(QtCore.QRect(260, 230, 111, 17))
        self.ps6.setObjectName("ps6")
        self.ps6.clicked.connect(self.ps6_check_box)

        # display folder location output box
        self.disp_folder_location = QtWidgets.QTextBrowser(self.centralwidget)
        self.disp_folder_location.setGeometry(QtCore.QRect(490, 30, 391, 31))
        self.disp_folder_location.setObjectName("disp_folder_location")

        # Buttons fro starting and stoping data recording and data plotting
        self.start_plotting_button = QtWidgets.QPushButton(self.centralwidget)
        self.start_plotting_button.setGeometry(QtCore.QRect(130, 170, 81, 23))
        self.start_plotting_button.setObjectName("start_plotting_button")
        self.start_plotting_button.setEnabled(False)
        self.start_plotting_button.clicked.connect(self.start_plotting)


        self.stop_plotting_button = QtWidgets.QPushButton(self.centralwidget)
        self.stop_plotting_button.setGeometry(QtCore.QRect(230, 170, 81, 23))
        self.stop_plotting_button.setObjectName("stop_plotting_button")
        self.stop_plotting_button.setEnabled(False)
        self.stop_plotting_button.clicked.connect(self.stop_plotting)

        self.start_recording_button = QtWidgets.QPushButton(self.centralwidget)
        self.start_recording_button.setGeometry(QtCore.QRect(490, 70, 101, 23))
        self.start_recording_button.setObjectName("start_recording_button")
        self.start_recording_button.setEnabled(False)
        self.start_recording_button.clicked.connect(self.start_recording_data)


        self.stop_recording_button = QtWidgets.QPushButton(self.centralwidget)
        self.stop_recording_button.setGeometry(QtCore.QRect(600, 70, 101, 23))
        self.stop_recording_button.setObjectName("stop_recording_button")
        self.stop_recording_button.setEnabled(False)
        self.stop_recording_button.clicked.connect(self.stop_recording_data)

        # Pressure Sensor graph widget
        date_axis = DateAxisItem(orientation='bottom')
        self.pressure_graph = PlotWidget(self.centralwidget,axisItems={'bottom': date_axis})
        self.pressure_graph.setGeometry(QtCore.QRect(10, 270, 1461, 591))
        self.pressure_graph.setObjectName("pressure_graph")
        self.initialise_plot()

        # Select Folder Button
        self.select_folder_button = QtWidgets.QPushButton(self.centralwidget)
        self.select_folder_button.setGeometry(QtCore.QRect(900, 30, 81, 31))
        self.select_folder_button.setObjectName("select_folder_button")
        self.select_folder_button.clicked.connect(self.get_folder_path)


        # timer for updating the data in the graph
        self.plot_timer = QtCore.QTimer()
        self.plot_timer.timeout.connect(self.update_plot_lines)


        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 980, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "VES Pressure Sensor Measurement"))
        self.select_com_port_label.setText(_translate("MainWindow", "Select COM Port"))
        self.refresh_button.setText(_translate("MainWindow", "Refresh"))
        self.connect_button.setText(_translate("MainWindow", "Connect"))
        self.com_port_input_label.setText(_translate("MainWindow", "COM PORT INPUT"))
        self.disconnect_button.setText(_translate("MainWindow", "Disconnect"))

        # for the labels
        self.l_data_recording.setText(_translate("MainWindow", "DATA RECORDING"))
        self.l_device_selection.setText(_translate("MainWindow", "DEVICE SELECTION"))
        self.l_folder_location.setText(_translate("MainWindow", "Folder Location for saving data"))
        self.l_data_plotting.setText(_translate("MainWindow", "DATA PLOTTING"))

        # pressure sensor checkboxes
        self.ps1.setText(_translate("MainWindow", "Pressure Sensor 1"))
        self.ps2.setText(_translate("MainWindow", "Pressure Sensor 2"))
        self.ps3.setText(_translate("MainWindow", "Pressure Sensor 3"))
        self.ps4.setText(_translate("MainWindow", "Pressure Sensor 4"))
        self.ps5.setText(_translate("MainWindow", "Pressure Sensor 5"))
        self.ps6.setText(_translate("MainWindow", "Pressure Sensor 6"))

        # buttons for starting and stoping the data recording and the data plotting
        self.start_plotting_button.setText(_translate("MainWindow", "Start Plotting"))
        self.stop_plotting_button.setText(_translate("MainWindow", "Stop Plotting"))
        self.start_recording_button.setText(_translate("MainWindow", "Start Recording"))
        self.stop_recording_button.setText(_translate("MainWindow", "Stop Recording"))
        self.select_folder_button.setText(_translate("MainWindow", "Select Folder"))

    def get_com_ports_list(self):
        # Get a list of all available COM ports
        ports = serial.tools.list_ports.comports()
        ports_list = []
        for port in ports:
            ports_list.append(port.device)

        return ports_list
    
    def refresh_com_ports(self):
        ports = serial.tools.list_ports.comports()
        ports_list = []
        for port in ports:
            ports_list.append(port.device)
        if not ports_list:
            self.log_output_box.append('No Com Ports Detected')
            self.connect_button.setEnabled(False)
            self.disconnect_button.setEnabled(False)
            self.start_plotting_button.setEnabled(False)
            self.stop_plotting_button.setEnabled(False)
        self.com_port_box.clear()
        self.com_port_box.addItems(ports_list)
        if ports_list:
            self.connect_button.setEnabled(True)


    def start_reading(self):
        self.connect_button.setEnabled(False)
        self.disconnect_button.setEnabled(True)
        self.start_plotting_button.setEnabled(True)
        
        

        # Start the serial reader thread
        self.serial_thread = SerialReaderThread(port=self.com_port_box.currentText())  # Update the port as necessary
        self.serial_thread.new_data_signal.connect(self.update_com_input)
        self.serial_thread.new_data_signal.connect(self.update_data)
        self.serial_thread.start()
        
        # Reflect the ouptut in the logs
        self.log_output_box.append('Connected to '+str(self.com_port_box.currentText()))

    def stop_reading(self):
        self.connect_button.setEnabled(True)
        self.disconnect_button.setEnabled(False)
        self.start_plotting_button.setEnabled(False)
        self.stop_plotting_button.setEnabled(False)
        self.start_recording_button.setEnabled(False)
        self.com_port_input.setPlainText('')
        # Stop the serial reader thread
        self.serial_thread.stop()
        self.log_output_box.append('Disconnected !')

    def update_com_input(self,data):
        self.com_port_input.setPlainText(str(data))

    def start_plotting(self):
        self.start_plotting_button.setEnabled(False)
        self.stop_plotting_button.setEnabled(True)
        self.start_plotting_graphs()
        if not self.ps1.isChecked():
            self.ps1_line.hide()
        if not self.ps2.isChecked():
            self.ps2_line.hide()
        if not self.ps3.isChecked():
            self.ps3_line.hide()
        if not self.ps4.isChecked():
            self.ps4_line.hide()
        if not self.ps5.isChecked():
            self.ps5_line.hide()
        if not self.ps6.isChecked():
            self.ps6_line.hide()
        self.plot_timer.start(500)

    def stop_plotting(self):
        self.stop_plotting_button.setEnabled(False)
        self.start_plotting_button.setEnabled(True)
        self.plot_timer.stop()
        self.stop_plotting_graphs()
        

    def initialise_plot(self):
        self.pressure_graph.setBackground('w')
        styles = {"color": "black", "font-size": "18px"}
        self.pressure_graph.setLabel("left", "Relative Pressure (bar)",**styles)
        self.pressure_graph.setLabel("bottom", "Time Stamp",**styles)
        self.pressure_graph.setTitle('Pressure Transmitter JUMO MIDAS ',color='k',size='20pt')
        self.pressure_graph.addLegend()
        self.pressure_graph.showGrid(x=True,y=True)

    def start_ps1_graph(self):
        pen = mkPen(color='darkorange', width=3, style=QtCore.Qt.SolidLine)
        self.ps1_line = self.pressure_graph.plot(self.time_stamp_data,self.pressure_sensor_1_data,pen=pen,symbol='o',symbolSize=10,symbolBrush='k',name='Pressure Sensor 1')

    def start_ps2_graph(self):
        pen = mkPen(color='lightcoral', width=3, style=QtCore.Qt.SolidLine)
        self.ps2_line = self.pressure_graph.plot(self.time_stamp_data,self.pressure_sensor_2_data,pen=pen,symbol='o',symbolSize=10,symbolBrush='k',name='Pressure Sensor 2')

    def start_ps3_graph(self):
        pen = mkPen(color='palegreen', width=3, style=QtCore.Qt.SolidLine)
        self.ps3_line = self.pressure_graph.plot(self.time_stamp_data,self.pressure_sensor_3_data,pen=pen,symbol='o',symbolSize=10,symbolBrush='k',name='Pressure Sensor 3')

    def start_ps4_graph(self):
        pen = mkPen(color='cyan', width=3, style=QtCore.Qt.SolidLine)
        self.ps4_line = self.pressure_graph.plot(self.time_stamp_data,self.pressure_sensor_4_data,pen=pen,symbol='o',symbolSize=10,symbolBrush='k',name='Pressure Sensor 4')

    def start_ps5_graph(self):
        pen = mkPen(color='royalblue', width=3, style=QtCore.Qt.SolidLine)
        self.ps5_line = self.pressure_graph.plot(self.time_stamp_data,self.pressure_sensor_5_data,pen=pen,symbol='o',symbolSize=10,symbolBrush='k',name='Pressure Sensor 5')

    def start_ps6_graph(self):
        pen = mkPen(color='magenta', width=3, style=QtCore.Qt.SolidLine)
        self.ps6_line = self.pressure_graph.plot(self.time_stamp_data,self.pressure_sensor_6_data,pen=pen,symbol='o',symbolSize=10,symbolBrush='k',name='Pressure Sensor 6')

    def start_plotting_graphs(self):
        self.start_ps1_graph()
        self.start_ps2_graph()
        self.start_ps3_graph()
        self.start_ps4_graph()
        self.start_ps5_graph()
        self.start_ps6_graph()

    def stop_plotting_graphs(self):
        self.pressure_graph.removeItem(self.ps1_line)
        self.pressure_graph.removeItem(self.ps2_line)
        self.pressure_graph.removeItem(self.ps3_line)
        self.pressure_graph.removeItem(self.ps4_line)
        self.pressure_graph.removeItem(self.ps5_line)
        self.pressure_graph.removeItem(self.ps6_line)

    def update_data(self,data):
        self.pressure_sensor_1_data.append(data[0])
        self.pressure_sensor_2_data.append(data[1])
        self.pressure_sensor_3_data.append(data[2])
        self.pressure_sensor_4_data.append(data[3])
        self.pressure_sensor_5_data.append(data[4])
        self.pressure_sensor_6_data.append(data[5])
        self.time_stamp_data.append(datetime.now().timestamp())

    def update_plot_lines(self):
        self.ps1_line.setData(self.time_stamp_data,self.pressure_sensor_1_data)
        self.ps2_line.setData(self.time_stamp_data,self.pressure_sensor_2_data)
        self.ps3_line.setData(self.time_stamp_data,self.pressure_sensor_3_data)
        self.ps4_line.setData(self.time_stamp_data,self.pressure_sensor_4_data)
        self.ps5_line.setData(self.time_stamp_data,self.pressure_sensor_5_data)
        self.ps6_line.setData(self.time_stamp_data,self.pressure_sensor_6_data)

    def ps1_check_box(self):
        if not self.ps1.isChecked():
                self.ps1_line.hide()
        else:
            self.ps1_line.show()

    def ps2_check_box(self):
        if not self.ps2.isChecked():
            self.ps2_line.hide()
        else:
            self.ps2_line.show()

    def ps3_check_box(self):
        if not self.ps3.isChecked():
            self.ps3_line.hide()
        else:
            self.ps3_line.show()

    def ps4_check_box(self):
        if not self.ps4.isChecked():
            self.ps4_line.hide()
        else:
            self.ps4_line.show()

    def ps5_check_box(self):
        if not self.ps5.isChecked():
            self.ps5_line.hide()
        else:
            self.ps5_line.show()

    def ps6_check_box(self):
        if not self.ps6.isChecked():
            self.ps6_line.hide()
        else:
            self.ps6_line.show()

    def get_folder_path(self):
        self.folder_path = QtWidgets.QFileDialog.getExistingDirectory()
        self.disp_folder_location.setPlainText(self.folder_path)
        if self.folder_path == '' :
            self.start_recording_button.setEnabled(False)
            self.stop_recording_button.setEnabled(False)
        elif self.connect_button.isEnabled():
            self.start_recording_button.setEnabled(False)
            self.stop_recording_button.setEnabled(False)
        elif self.disconnect_button.isEnabled() :
            self.start_recording_button.setEnabled(True)

    def start_recording_data(self):
        # Generate a timestamped file name
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.csv_filename = os.path.join(self.folder_path, f"pressure_data_{timestamp}.csv")

        # Open the file in write mode and set up CSV writer
        self.csv_file = open(self.csv_filename, mode='w', newline='')
        self.csv_writer = csv.writer(self.csv_file)

        # Write the CSV header
        self.csv_writer.writerow([
            "Timestamp",
            "Pressure Sensor 1",
            "Pressure Sensor 2",
            "Pressure Sensor 3",
            "Pressure Sensor 4",
            "Pressure Sensor 5",
            "Pressure Sensor 6"
        ])

        # Connect signal for writing data
        self.serial_thread.new_data_signal.connect(self.write_data_to_csv)

        self.start_recording_button.setEnabled(False)
        self.stop_recording_button.setEnabled(True)
        self.log_output_box.append(f"Started recording data to {self.csv_filename}")  

    def write_data_to_csv(self, data):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.csv_writer.writerow([timestamp] + list(data))
        
    def stop_recording_data(self):
        self.serial_thread.new_data_signal.disconnect(self.write_data_to_csv)
        self.csv_file.close()
        self.log_output_box.append("Stopped recording and saved the file.")
        
        self.stop_recording_button.setEnabled(False)
        self.start_recording_button.setEnabled(True)




        

    





if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
